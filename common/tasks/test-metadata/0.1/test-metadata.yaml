---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: test-metadata
spec:
  description: |
    The `test-metadata` Task is responsible for gathering and processing metadata during the execution of a pipeline test.
    It collects various Git and repository details, such as the type of event that triggered the pipeline (Push or Pull Request),
    the Git URL and revision, and details about the container image built during the test.
    The task processes metadata labels and annotations, constructs a job specification for the Konflux CI system,
    and writes this information to specified results.
  results:
    - name: test-event-type
      description: Indicates if the job is triggered by a Pull Request or a Push event.
    - name: pull-request-number
      description: The pull request number if the job is triggered by a pull request event.
    - name: git-url
      description: The Git URL from which the test pipeline is originating. This can be from a fork or the original repository.
    - name: git-revision
      description: The Git revision (commit SHA) from which the test pipeline is originating.
    - name: container-image
      description: The container image built from the specified Git revision.
    - name: git-org
      description: The GitHub organization from which the test is originating.
    - name: git-repo
      description: The repository from which the test is originating.
    - name: pull-request-author
      description: The GitHub author of the pull request event.
    - name: job-spec
      description: The Konflux CI job spec metadata generated.
    - name: source-repo-url
      description: Will show the source from where a Pull Request was opened. Can be from a fork or upstream.
    - name: source-repo-branch
      description: Get the branch from the fork or upstream repo where the pipeline is executed.
    - name: component-name
      description: The name of the component that is being executed from Konflux.
    - name: source-artifact
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  params:
    - name: SNAPSHOT
      description: The JSON string of the Snapshot under test.
    - name: test-name
      type: string
      description: The name of the test being executed.
  steps:
    - name: test-metadata
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      workingDir: /workspace
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: EVENT_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/event-type']
        - name: KONFLUX_COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
        - name: PULL_REQUEST_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/pull-request']
        - name: GIT_ORGANIZATION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-org']
        - name: GIT_REPOSITORY
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-repository']
        - name: SOURCE_REPO_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/source-repo-url']
        - name: SOURCE_REPO_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/source-branch']
        - name: TARGET_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['build.appstudio.redhat.com/target_branch']
      script: |
        #!/bin/bash

        # Extract additional environment variables from SNAPSHOT
        GIT_URL=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .source.git.url' <<< "$SNAPSHOT")
        GIT_REVISION=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "$SNAPSHOT")
        COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")
        PR_AUTHOR="$(curl -s https://api.github.com/repos/${GIT_ORGANIZATION}/${GIT_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER} | jq -r .user.login)"
        COMPONENT_IMAGE_BASE=$(echo ${COMPONENT_CONTAINER_IMAGE} | cut -d@ -f1 )

        if [[ "$SOURCE_BRANCH" == "$TARGET_BRANCH" ]]; then
          source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:${GIT_REVISION}.git" | jq -er ".layers[].digest")
        else
          source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:on-pr-${GIT_REVISION}.git" | jq -er ".layers[].digest")
        fi 

        echo -n "oci:$COMPONENT_IMAGE_BASE@$source_artifact_digest" > $(results.source-artifact.path)

        # In case is coming from /retest event then it's a pull_request
        # if event type is not push and pull_request_number is not empty then is a pull_request
        if [ "$EVENT_TYPE" != "push" ] && [ -n "$PULL_REQUEST_NUMBER" ]; then
          EVENT_TYPE="pull_request"
        fi

        JOB_SPEC=$(cat <<EOF
        {
            "container_image": "$COMPONENT_CONTAINER_IMAGE",
            "konflux_component": "$KONFLUX_COMPONENT_NAME",
            "git": {
                "pull_request_number": $PULL_REQUEST_NUMBER,
                "pull_request_author": "$PR_AUTHOR",
                "git_org": "$GIT_ORGANIZATION",
                "git_repo": "$GIT_REPOSITORY",
                "commit_sha": "$GIT_REVISION",
                "event_type": "$EVENT_TYPE",
                "source_repo_url": "$SOURCE_REPO_URL",
                "source_repo_branch": "$SOURCE_REPO_BRANCH"
            }
        }
        EOF
        )

        echo "[INFO] Job spec:"
        echo "$JOB_SPEC"

        # Log the derived environment variables
        echo "Integration Test metadata:"
        echo "  SNAPSHOT: $SNAPSHOT"
        echo "  EVENT_TYPE: $EVENT_TYPE"
        echo "  KONFLUX_COMPONENT_NAME: $KONFLUX_COMPONENT_NAME"
        echo "  PULL_REQUEST_NUMBER: $PULL_REQUEST_NUMBER"
        echo "  GIT_ORGANIZATION: $GIT_ORGANIZATION"
        echo "  GIT_REPOSITORY: $GIT_REPOSITORY"
        echo "  GIT_URL: $GIT_URL"
        echo "  GIT_REVISION: $GIT_REVISION"
        echo "  PR_AUTHOR: $PR_AUTHOR"
        echo "  COMPONENT_CONTAINER_IMAGE: $COMPONENT_CONTAINER_IMAGE"
        echo "  SOURCE_REPO_URL: $SOURCE_REPO_URL"
        echo "  SOURCE_REPO_BRANCH: $SOURCE_REPO_BRANCH"

        # Write each environment variable to its respective result file
        echo -n "$EVENT_TYPE" > $(results.test-event-type.path)
        echo -n "$PULL_REQUEST_NUMBER" > $(results.pull-request-number.path)
        echo -n "$GIT_ORGANIZATION" > $(results.git-org.path)
        echo -n "$GIT_REPOSITORY" > $(results.git-repo.path)
        echo -n "$COMPONENT_CONTAINER_IMAGE" > $(results.container-image.path)
        echo -n "$GIT_URL" > $(results.git-url.path)
        echo -n "$GIT_REVISION" > $(results.git-revision.path)
        echo -n "$PR_AUTHOR" > $(results.pull-request-author.path)
        echo -n "$JOB_SPEC" > $(results.job-spec.path)
        echo -n "$SOURCE_REPO_URL" > $(results.source-repo-url.path)
        echo -n "$SOURCE_REPO_BRANCH" > $(results.source-repo-branch.path)
        echo -n "$KONFLUX_COMPONENT_NAME" > $(results.component-name.path)
