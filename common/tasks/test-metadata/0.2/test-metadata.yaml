---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: test-metadata
spec:
  results:
    - name: job-spec
      description: The konflux ci job spec metadata generated.
    - name: source-artifact
      description: The Trusted Artifact URI pointing to the artifact with
        the application source code.
      type: string
  params:
    - name: SNAPSHOT
      description: The JSON string of the Snapshot under test.
    - name: test-name
      type: string
      description: The name of the test being executed.
  steps:
    - name: test-metadata
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      workingDir: /workspace
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: EVENT_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/event-type']
        - name: KONFLUX_COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
        - name: PULL_REQUEST_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/pull-request']
        - name: GIT_ORGANIZATION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-org']
        - name: GIT_REPOSITORY
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-repository']
        - name: SOURCE_REPO_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/source-repo-url']
        - name: SOURCE_REPO_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/source-branch']
        - name: TARGET_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['build.appstudio.redhat.com/target_branch']
      script: |
        #!/bin/bash

        # Extract additional environment variables from SNAPSHOT
        GIT_URL=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .source.git.url' <<< "$SNAPSHOT")
        GIT_REVISION=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "$SNAPSHOT")
        SOURCE_REPO_ORG=$(echo "$SOURCE_REPO_URL" | sed -E 's#https://github.com/([^/]+)/.*#\1#')

        PR_AUTHOR="$(curl -s https://api.github.com/repos/${GIT_ORGANIZATION}/${GIT_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER} | jq -r .user.login)"

        COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")

        # In case is coming from /retest event then it's a pull_request
        # if event type is not push and pull_request_number is not empty then is a pull_request
        if [ "$EVENT_TYPE" != "push" ] && [ -n "$PULL_REQUEST_NUMBER" ]; then
          EVENT_TYPE="pull_request"
        fi

        JOB_SPEC=$(cat <<EOF
        {
            "container_image": "$COMPONENT_CONTAINER_IMAGE",
            "konflux_component": "$KONFLUX_COMPONENT_NAME",
            "snapshot": $SNAPSHOT,
            "git": {
                "pull_request_number": $PULL_REQUEST_NUMBER,
                "pull_request_author": "$PR_AUTHOR",
                "org": "$GIT_ORGANIZATION",
                "repo": "$GIT_REPOSITORY",
                "commit_sha": "$GIT_REVISION",
                "event_type": "$EVENT_TYPE",
                "source_repo_url": "$SOURCE_REPO_URL",
                "source_repo_org": "$SOURCE_REPO_ORG",
                "source_repo_branch": "$SOURCE_REPO_BRANCH",
                "url": "$GIT_URL",
                "revision": "$GIT_REVISION"
            }
        }
        EOF
        )

        echo "[INFO] Job spec:"
        echo "$JOB_SPEC"

        # Write job-spec to result file
        echo -n "$JOB_SPEC" > $(results.job-spec.path)

        if [[ "$SOURCE_BRANCH" == "$TARGET_BRANCH" ]]; then
          source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:${GIT_REVISION}.git" | jq -er ".layers[].digest")
        else
          source_artifact_digest=$(oras manifest fetch --pretty "${COMPONENT_IMAGE_BASE}:on-pr-${GIT_REVISION}.git" | jq -er ".layers[].digest")
        fi

        echo -n "oci:$COMPONENT_IMAGE_BASE@$source_artifact_digest" > $(results.source-artifact.path)
